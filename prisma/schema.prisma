generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PLUS
  BUSINESS
}

model Projects {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String               @db.VarChar
  author             String               @db.VarChar
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  synopsis           String               @db.VarChar
  janres             String[]             @db.VarChar
  userId             String               @map("user_id") @db.Uuid
  users              Users                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  timelines          Timelines[]
  pages              Pages[]
  characters         Characters[]
  characterRelations CharacterRelations[]
}

model Users {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  userName           String               @map("user_name") @db.VarChar
  token              Int                  @db.SmallInt
  plan               Plan                 @default(FREE)
  projects           Projects[]
  timelines          Timelines[]
  pages              Pages[]
  characters         Characters[]
  characterRelations CharacterRelations[]
}

model Timelines {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String   @db.VarChar
  content   String   @db.VarChar
  userId    String   @map("user_id") @db.Uuid
  projectId String   @map("project_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projects  Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Pages {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar
  content     Json     @db.Json
  contentText String   @db.VarChar
  summary     String   @db.VarChar
  userId      String   @map("user_id") @db.Uuid
  projectId   String   @map("project_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  users       Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projects    Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Characters {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar
  age         String   @db.VarChar
  description String   @db.VarChar
  userId      String   @map("user_id") @db.Uuid
  projectId   String   @map("project_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  users       Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projects    Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model CharacterRelations {
  nodes     Json     @db.Json
  edges     Json     @db.Json
  userId    String   @map("user_id") @db.Uuid
  projectId String   @id @map("project_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projects  Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
